# @package _global_
defaults:
  - /pipeline: expression_profile
  - override /scheduler: cosine_warmup_timm

model:
  _name_: emb_mamba
  #class: mamba_ssm.models.mixer_seq_simple.MambaLMHeadModel
  config:
    d_model: 128
    n_layer: 12
    vocab_size: 12
    rms_norm: True
    residual_in_fp32: True
    fused_add_norm: True
    pad_vocab_size_multiple: 8
    ssm_cfg: {}

task:
  loss:
    _name_: bpnet_loss
    loss_total_reads: count

trainer:
  accelerator: gpu
  devices: 1
  num_nodes: 1
  accumulate_grad_batches: ${div_up:${train.global_batch_size}, ${eval:${trainer.devices} * ${dataset.batch_size} * ${trainer.num_nodes}}}
  max_epochs: 1 # limit for time efficiency
  precision: bf16  # bf16 only a100
  gradient_clip_val: 1.0
  # strategy: null

dataset: #Â CVPC dataset


scheduler:
  t_in_epochs: False
  t_initial: ${eval:${div_up:${dataset.train_len}, ${train.global_batch_size}} * ${trainer.max_epochs}}
  warmup_lr_init: 1e-6
  warmup_t: ${eval:${div_up:${dataset.train_len}, ${train.global_batch_size}} * ${trainer.max_epochs} * 0.01}
  lr_min: ${eval:0.1 * ${optimizer.lr}}

optimizer:
  lr: 6e-4
  weight_decay: 0.1

train:
  gpu_mem: ${eval:"round(float(__import__('subprocess').check_output('nvidia-smi -i 0 --query-gpu=memory.total --format=csv,noheader,nounits', shell=True).strip().decode()) / 1000)"}
  seed: 2222
  global_batch_size: ${dataset.batch_size}
  remove_test_loader_in_eval: False
  pretrained_model_strict_load: False # false allows encoder/decoder to be used if new model uses it
  # for loading backbone and not head, requires both of these flags below
  #pretrained_model_path: /home/callum/private/hyena/safari-internal-inf/layer2_seq1024/loss.ckpt
  pretrained_model_state_hook:
    _name_: load_backbone
    freeze_backbone: false  # seems to work much better if false (ie finetune entire model)
